#if !canImport(ObjectiveC)
import XCTest

extension CalculatorResultTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CalculatorResultTests = [
        ("testFailsWhenTaxYearHasNoRates", testFailsWhenTaxYearHasNoRates),
    ]
}

extension CalculatorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CalculatorTests = [
        ("testAssetEventCapitalReturnTooLarge", testAssetEventCapitalReturnTooLarge),
        ("testAssetEventCapitalReturnTooSmall", testAssetEventCapitalReturnTooSmall),
        ("testAssetEventDividendNotMatchingAmount", testAssetEventDividendNotMatchingAmount),
        ("testAssetEventDividendTooLarge", testAssetEventDividendTooLarge),
        ("testAssetEventDividendTooSmall", testAssetEventDividendTooSmall),
        ("testAssetEventWithNoAcquisition", testAssetEventWithNoAcquisition),
        ("testBasicSingleAsset", testBasicSingleAsset),
        ("testBedAndBreakfastEdges", testBedAndBreakfastEdges),
        ("testDateBefore20080406Throws", testDateBefore20080406Throws),
        ("testSection104DisposeTooMuch", testSection104DisposeTooMuch),
    ]
}

extension DefaultParserTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DefaultParserTests = [
        ("testParseAssetEventIncorrectAmountFormatFails", testParseAssetEventIncorrectAmountFormatFails),
        ("testParseAssetEventIncorrectDateFormatFails", testParseAssetEventIncorrectDateFormatFails),
        ("testParseAssetEventIncorrectKindFails", testParseAssetEventIncorrectKindFails),
        ("testParseAssetEventIncorrectNumberOfFieldsFails", testParseAssetEventIncorrectNumberOfFieldsFails),
        ("testParseAssetEventIncorrectValueFormatFails", testParseAssetEventIncorrectValueFormatFails),
        ("testParseBuyTransactionSuccess", testParseBuyTransactionSuccess),
        ("testParseCapitalReturnEventSuccess", testParseCapitalReturnEventSuccess),
        ("testParseCommentSuccess", testParseCommentSuccess),
        ("testParseDividendEventSuccess", testParseDividendEventSuccess),
        ("testParseSellTransactionSuccess", testParseSellTransactionSuccess),
        ("testParseTransactionIncorrectAmountFormatFails", testParseTransactionIncorrectAmountFormatFails),
        ("testParseTransactionIncorrectDateFormatFails", testParseTransactionIncorrectDateFormatFails),
        ("testParseTransactionIncorrectExpensesFormatFails", testParseTransactionIncorrectExpensesFormatFails),
        ("testParseTransactionIncorrectKindFails", testParseTransactionIncorrectKindFails),
        ("testParseTransactionIncorrectNumberOfFieldsFails", testParseTransactionIncorrectNumberOfFieldsFails),
        ("testParseTransactionIncorrectPriceFormatFails", testParseTransactionIncorrectPriceFormatFails),
    ]
}

extension DescriptionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DescriptionTests = [
        ("testAssetResult", testAssetResult),
        ("testDisposalMatch", testDisposalMatch),
        ("testSection104HoldingState", testSection104HoldingState),
        ("testTaxYear", testTaxYear),
        ("testTransaction", testTransaction),
        ("testTransactionToMatch", testTransactionToMatch),
    ]
}

extension DisposalMatchTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DisposalMatchTests = [
        ("testMatchingDisposal", testMatchingDisposal),
        ("testSection104Disposal", testSection104Disposal),
    ]
}

extension ExamplesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ExamplesTests = [
        ("testExamples", testExamples),
    ]
}

extension MatchingProcessorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__MatchingProcessorTests = [
        ("testSimple", testSimple),
    ]
}

extension Section104HoldingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__Section104HoldingTests = [
        ("testProcessesAcquisitionsCorrectly", testProcessesAcquisitionsCorrectly),
        ("testProcessesDisposalsCorrectly", testProcessesDisposalsCorrectly),
        ("testProcessesManyDisposalsCorrectly", testProcessesManyDisposalsCorrectly),
        ("testProcessesTooBigDisposalCorrectly", testProcessesTooBigDisposalCorrectly),
    ]
}

extension TaxYearTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TaxYearTests = [
        ("testDatesToTaxYearCorrect", testDatesToTaxYearCorrect),
        ("testTaxYearCompare", testTaxYearCompare),
        ("testTaxYearRatesAvailable", testTaxYearRatesAvailable),
        ("testTaxYearStringCorrect", testTaxYearStringCorrect),
    ]
}

extension TransactionToMatchTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TransactionToMatchTests = [
        ("testOffsetAndSplitWorks", testOffsetAndSplitWorks),
        ("testOffsetWorks", testOffsetWorks),
        ("testSplitSuccess", testSplitSuccess),
        ("testSplitTooMuchFails", testSplitTooMuchFails),
        ("testSplitTwiceSuccess", testSplitTwiceSuccess),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(CalculatorResultTests.__allTests__CalculatorResultTests),
        testCase(CalculatorTests.__allTests__CalculatorTests),
        testCase(DefaultParserTests.__allTests__DefaultParserTests),
        testCase(DescriptionTests.__allTests__DescriptionTests),
        testCase(DisposalMatchTests.__allTests__DisposalMatchTests),
        testCase(ExamplesTests.__allTests__ExamplesTests),
        testCase(MatchingProcessorTests.__allTests__MatchingProcessorTests),
        testCase(Section104HoldingTests.__allTests__Section104HoldingTests),
        testCase(TaxYearTests.__allTests__TaxYearTests),
        testCase(TransactionToMatchTests.__allTests__TransactionToMatchTests),
    ]
}
#endif
